
var documents = [{
    "id": 0,
    "url": "https://seanlivelsberger.github.io/404.html",
    "title": "",
    "body": " 404 Page not found :(  The requested page could not be found. "
    }, {
    "id": 1,
    "url": "https://seanlivelsberger.github.io/about/",
    "title": "About Me",
    "body": " Current: I live in the Lincoln Square neighborhood of Chicago and work as an Analytics Lead at ShopRunner. I am pursuing a master’s degree in computer science at Georgia Tech through the OMSCS program. Past: I previously worked as a Director of Advanced Analytics at the Chicago-based marketing startup, Target Data. I studied math and economics at The University of Chicago for undergrad. I grew up in Lake Zurich, a suburb of Chicago. Interests: Paddleboarding Bouldering Bike Rides Economics Learning Strength Training The NBA Sous Vide Wineries Bar trivia Cooking BBQ Beer gardens Midnight Movies Halo Virtual Reality Visiting friends around the country Podcasts and documentaries covering scams Dining all across the city D&#246;ner Kebabs German Beer (Particularly Weizenbocks) Spicy food (even if painful) Traveling the worldCulture Consumption: I am a person who greatly enjoys rating, ranking, evaluating, and debating culture. Around 2014, I became rather meticulous in tracking the culture that I was consuming. The form in which I have kept track of things has changed over time. However, in its latest iteration, I am not actually rating each item on a scale, but rather am ranking items against other items within the same release year for that medium. Below is the google sheet that I use to track everything for music, tv, and movies. As I also generally enjoy making ranked lists, below are lists of my favorite items for a couple of cultural categories. Music (Albums):   Prince - Purple Rain  Sade - Diamond Life  Sam Cooke - Mr. Soul  Nirvana - Nevermind  Common - Be  Michael Jackson - Thriller  2Pac - All Eyez On Me  Dr. Dre - The Chronic  Kanye West - Graduation  Sade - Promise  The Alan Parsons Project - I Robot  SWV - It's About Time  Otis Redding - Pain in My Heart  Kid Cudi - Man on the Moon: The End of Day  Wu-Tang Clan - Enter The Wu-Tang (36 Chambers)  Florence + The Machine - Ceremonials  The Doors - The Doors  The Doors - L. A. Woman  N. W. A. - Straight Outta Compton  Kanye West - The College Dropout  Kanye West - My Beautiful Dark Twisted Fantasy  Jimi Hendrix - Are You Experienced  Linkin Park - Hybrid Theory  Common - Finding Forever  Bruce Springsteen - Born in the U. S. A.   Gipsy Kings - Gipsy Kings  Frank Sinatra - In the Wee Small Hours  John Coltrane - A Love Supreme  Carly Rae Jepsen - Emotion  Whitney - Light Upon The Lake  Janet Jackson - ControlMusic (Artists):   Prince  Sade  Sam Cooke  Nirvana  Common  Michael Jackson  Kanye West  Otis Redding  2Pac  Dr. Dre  Frank Sinatra  The Alan Parsons Project  SWV  The Beatles  Linkin Park  Marvin Gaye  Kid Cudi  Jimi Hendrix  Bruce Springsteen  The Doors  Nas  Snoop Dogg  Madonna  Florence + The Machine  Best Coast  blink-182  Wu-Tang Clan  Stevie Wonder  Gipsy Kings  N. W. A.   OutKast  Cream  Adele  Aaliyah  Janet Jackson  Carly Rae Jepsen  The Notorious B. I. G.   The D. O. C.   John Coltrane  TLC  Heart  The Offspring  Buena Vista Social Club  WhitneyTV Shows:   Peep Show  The Wire  It's Always Sunny in Philadelphia  Scrubs  The Simpsons  Seinfeld  Curb Your Enthusiasm  Band of Brothers  Firefly  Narcos  Futurama  Freaks and Geeks  PEN15Movies:   Inglorious Basterds  Roadhouse  Kill Bill Vol. 1  The Matrix  The Fast and The Furious  Goldeneye  The Hateful Eight  The Thing  The Waterboy  Billy Madison  Kill Bill Vol. 2  Wayne's World  Raider's of the Lost Ark  The Blues BrothersGraphic Novels:   Preacher  Watchmen  Persepolis  The Boys  Death Note  Y: The Last Man  The Walking Dead  Black Hole  Maus  The Crow"
    }, {
    "id": 2,
    "url": "https://seanlivelsberger.github.io/expertise/",
    "title": "Expertise",
    "body": "Download the most up to date version of my resume here. Academic: Georgia Institute of TechnologyExpected 2021Master of Science in Computer ScienceSpecialization: Machine LearningGPA: 4. 00 The University of Chicago2013Bachelor of Science in Mathematics, Bachelor of Arts in EconomicsDean’s List 2012-2013GPA: 3. 24 "
    }, {
    "id": 3,
    "url": "https://seanlivelsberger.github.io/categories/",
    "title": "Tags",
    "body": "Contents: {% if site. categories. size &gt; 0 %} {% for category in site. categories %} {% capture category_name %}{{ category | first }}{% endcapture %} {{ category_name }}{% endfor %}{% endif %} {% for category in site. categories %}  {% capture category_name %}{{ category | first }}{% endcapture %} &lt;h3 id = {{ category_name }} &gt;&lt;i class= fas fa-tags category-tags-icon &gt;&lt;/i&gt;&lt;/i&gt; {{ category_name }}&lt;/h3&gt;&lt;a name= {{ category_name | slugize }} &gt;&lt;/a&gt;{% for post in site. categories[category_name] %}{%- assign date_format = site. minima. date_format | default:  %b %-d, %Y  -%}&lt;article class= archive-item &gt; &lt;p class= post-meta post-meta-title &gt;&lt;a class= page-meta  href= {{ site. baseurl }}{{ post. url }} &gt;{{post. title}}&lt;/a&gt; • {{ post. date | date: date_format }}&lt;/p&gt;&lt;/article&gt;{% endfor %} {% endfor %}"
    }, {
    "id": 4,
    "url": "https://seanlivelsberger.github.io/images/copied_from_nb/",
    "title": "",
    "body": "WarningDo not manually save images into this folder. This is used by GitHub Actions to automatically copy images.  Any images you save into this folder could be deleted at build time. "
    }, {
    "id": 5,
    "url": "https://seanlivelsberger.github.io/sql/snowflake/vertica/postgres/2020/03/06/sql-minimum-shared-date.html",
    "title": "SQL: Minimum Shared Date Between Date Ranges",
    "body": "2020/03/06 - I recently encountered this scenario at work and thought the solution was worth highlighting. In this scenario, I had two tables that held information on Users. One table contained the start and end dates of ranges for which the user had active saved payment information. The other table contained the start and end date ranges for which the user had an active shipping address saved. I needed to find the earliest date at which each user had both active payment information and an active shipping address. The user could be identified by a user ID field in each table. The starting thought was to construct a table of all date values in the relevant range. One would then cross join this table to both tables looking for dates where the payment information and shipping address are both saved, then taking the minimum of those dates for each user. This could be a viable strategy for a small dataset, but when performed on millions of members and date ranges, the cross join operation would be inefficient. Also, maintaining the list of “relevant” dates is not something that can necessarily be automated. As such, if you wanted to perform this operation repeatedly in the future, you would have to manually maintain the date list. However, we have a much more elegant and efficient solution to this problem shown in the query below. SELECTCOALESCE(p. user_id,a. user_id) AS user_id,MIN(CASE     WHEN p. start_date BETWEEN a. start_date AND a. end_date       OR a. start_date BETWEEN p. start_date AND p. end_date            THEN GREATEST(a. start_date,p. start_date)END)  FROM  data_schema. saved_payment_date_ranges p  INNER JOIN  data_schema. saved_address_date_ranges a  ON a. user_id = p. user_idGROUP BY 1The way this solution does most of the work in the MIN function statement. Specifically, the query joins all possible date ranges for each user. Through the case statement, it then scans each pairing looking for ones where there is some overlap in the date ranges. For that pairing, it then extracts the greatest of the two range start dates (the start of the overlap). For each user, it then uses the MIN aggregation function to pick their earliest overlap date. "
    }, {
    "id": 6,
    "url": "https://seanlivelsberger.github.io/sql/snowflake/vertica/postgres/2020/03/04/sql-regex-replace.html",
    "title": "SQL: REGEX_REPLACE",
    "body": "2020/03/04 - Imagine that you are working with a particularly messy dataset. In this scenario you have a field available to you that is of a string-based data type. However, the data in this field is supposed to represent some set of numeric values (e. g. price, quantity, etc. ). This is a frequently encountered scenario when working with messy data. Assuming the values of this field are “clean,” one can simply coerce the field into the desired numeric data type with a statement similar to that of the one shown below: SELECTmessy_numeric_field::DOUBLE as actual_numeric_field  FROM  data_tableNow, if the values are not “clean,” then if one wants to create a numeric field, one must creatively clean the data. There are many ways in which the data can be unclean. For this post, I want to focus on the scenario where the alleged numeric field somehow has come to possess non-numeric characters amidst the numeric characters. Below are some examples of this case. 6,000. 00$500[33]If one were to try to coerce these values to a numeric format, the SQL database would throw an error. In the first example, the SQL engine will not understand how to interpret the comma. In the second example, the SQL engine will clearly not know how to interpret the currency denomination. Lastly, in the third example, the SQL engine will not know what to do with the brackets. One strategy for managing these uninterpretable characters would be to do a form of replacement or series of replacements using the REPLACE function. Below, I have drawn up the usage of this function that would create a field that could be successfully coerced as a numeric data type. SELECTREPLACE(REPLACE(REPLACE(REPLACE(messy_numeric_field,',',''),'usd',''),'[',''),']','')::DOUBLE as actual_numeric_field  FROM  data_tableAs one builds this sort of fix, it becomes evident that this solution is not scalable. One will have to constantly manage this query for any new odd characters that appear in the base field. In order to manage this problem in a scalable manner, one should instead rely on the regular expressions enabled replace function, REGEXP_REPLACE. With regular expressions, one can search for patterns within text as opposed to a specific value or sequence of values. To solve the problem that we are facing, one would want to use the query below. SELECTREGEXP_REPLACE(messy_numeric_field,'[^0-9. ]','')::DOUBLE as actual_numeric_field  FROM  data_tableThis use of the REGEXP_REPLACE function operates by searching for any characters that are not a number or not a period. Once it finds a character that fits that pattern, it replaces it with the empty string, thereby removing any unwanted characters. One can then proceed with the data type coercion with a cleansed field of values. Based on my past experiences, one additional recommendation would be to add a NULLIF wrapper on the above usage of REGEXP_REPLACE. The addition is featured in the update query below. SELECTNULLIF(REGEXP_REPLACE(messy_numeric_field,'[^0-9. ]',''),'')::DOUBLE as actual_numeric_field  FROM  data_tableThe usage of NULLIF here adds an extra layer of cleanliness to your data clean up. It is specifically relevant due to the fact that the replace action is insert the empty string. If a messy field value consists exclusively of non-numeric characters (e. g. just a decimal) it would leave an empty string final value after our replacement operation. This is less that ideal for two reasons. For one, depending on the SQL engine, the empty string may actually not convert to a numeric in the coercion operation. More importantly though, the existence of empty string numeric values may not be perceptible if the dataset is sufficiently large. If one then goes to count non-null values under the assumption that values are either legitimate or null, one could potentially come away with an incorrect understanding of their data. "
    }, {
    "id": 7,
    "url": "https://seanlivelsberger.github.io/fastpages/jupyter/2020/02/20/test.html",
    "title": "Fastpages Notebook Blog Post",
    "body": "2020/02/20 -           About This notebook is a demonstration of some of capabilities of fastpages with notebooks. With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! Front Matter : Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: Setting toc: true will automatically generate a table of contentsSetting badges: true will automatically include GitHub and Google Colab links to your notebook. Setting comments: true will enable commenting on your blog post, powered by utterances. More details and options for front matter can be viewed on the front matter section of the README. Markdown Shortcuts : put a #hide flag at the top of any cell you want to completely hide in the docs put a #collapse flag at the top of any cell if you want to hide that cell by default, but stil have it be visible to the reader:              #collapseimport pandas as pdimport altair as alt       put a #collapse_show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:              #collapse_showcars = &#39;https://vega. github. io/vega-datasets/data/cars. json&#39;movies = &#39;https://vega. github. io/vega-datasets/data/movies. json&#39;sp500 = &#39;https://vega. github. io/vega-datasets/data/sp500. csv&#39;stocks = &#39;https://vega. github. io/vega-datasets/data/stocks. csv&#39;flights = &#39;https://vega. github. io/vega-datasets/data/flights-5k. json&#39;       Interactive Charts With Altair : Charts made with Altair remain interactive.  Example charts taken from this repo, specifically this notebook. Example 1: DropDown :       # single-value selection over [Major_Genre, MPAA_Rating] pairs# use specific hard-wired values as the initial selected valuesselection = alt. selection_single(  name=&#39;Select&#39;,  fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;],  init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;},  bind={&#39;Major_Genre&#39;: alt. binding_select(options=genres), &#39;MPAA_Rating&#39;: alt. binding_radio(options=mpaa)}) # scatter plot, modify opacity based on selectionalt. Chart(movies). mark_circle(). add_selection(  selection). encode(  x=&#39;Rotten_Tomatoes_Rating:Q&#39;,  y=&#39;IMDB_Rating:Q&#39;,  tooltip=&#39;Title:N&#39;,  opacity=alt. condition(selection, alt. value(0. 75), alt. value(0. 05)))    Example 2: Tooltips :       alt. Chart(movies). mark_circle(). add_selection(  alt. selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;])). encode(  x=&#39;Rotten_Tomatoes_Rating:Q&#39;,  y=alt. Y(&#39;IMDB_Rating:Q&#39;, axis=alt. Axis(minExtent=30)), # use min extent to stabilize axis title placement  tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;]). properties(  width=600,  height=400)    Example 3: More Tooltips :       # select a point for which to provide details-on-demandlabel = alt. selection_single(  encodings=[&#39;x&#39;], # limit selection to x-axis value  on=&#39;mouseover&#39;, # select on mouseover events  nearest=True,  # select data point nearest the cursor  empty=&#39;none&#39;   # empty selection includes no data points)# define our base line chart of stock pricesbase = alt. Chart(). mark_line(). encode(  alt. X(&#39;date:T&#39;),  alt. Y(&#39;price:Q&#39;, scale=alt. Scale(type=&#39;log&#39;)),  alt. Color(&#39;symbol:N&#39;))alt. layer(  base, # base line chart    # add a rule mark to serve as a guide line  alt. Chart(). mark_rule(color=&#39;#aaa&#39;). encode(    x=&#39;date:T&#39;  ). transform_filter(label),    # add circle marks for selected time points, hide unselected points  base. mark_circle(). encode(    opacity=alt. condition(label, alt. value(1), alt. value(0))  ). add_selection(label),  # add white stroked text to provide a legible background for labels  base. mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2). encode(    text=&#39;price:Q&#39;  ). transform_filter(label),  # add text labels for stock prices  base. mark_text(align=&#39;left&#39;, dx=5, dy=-5). encode(    text=&#39;price:Q&#39;  ). transform_filter(label),    data=stocks). properties(  width=700,  height=400)    Data Tables : You can display tables per the usual way in your blog:       movies = &#39;https://vega. github. io/vega-datasets/data/movies. json&#39;df = pd. read_json(movies)# display table with pandasdf[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;,   &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]]. head()           Title   Worldwide_Gross   Production_Budget   IMDB_Rating         0   The Land Girls   146083. 0   8000000. 0   6. 1       1   First Love, Last Rites   10876. 0   300000. 0   6. 9       2   I Married a Strange Person   203134. 0   250000. 0   6. 8       3   Let's Talk About Sex   373615. 0   300000. 0   NaN       4   Slam   1087521. 0   1000000. 0   3. 4     Images : Local Images : You can reference local images and they will be copied and rendered on your blog automatically.  You can include these with the following markdown syntax: ![](my_icons/fastai_logo. png) Remote Images : Remote images can be included with the following markdown syntax: ![](https://image. flaticon. com/icons/svg/36/36686. svg) Animated Gifs : Animated Gifs work, too! ![](https://upload. wikimedia. org/wikipedia/commons/7/71/ChessPawnSpecialMoves. gif) Captions : You can include captions with markdown images like this: ![](https://www. fast. ai/images/fastai_paper/show_batch. png  Credit: https://www. fast. ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/ ) Other Elements Tweetcards : Typing &gt; twitter: https://twitter. com/jakevdp/status/1204765621767901185?s=20 will render this:Altair 4. 0 is released! https://t. co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t. co/roXmzcsT58 . . . read on for some highlights. pic. twitter. com/vWJ0ZveKbZ &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Youtube Videos : Typing &gt; youtube: https://youtu. be/XfoYk_Z5AkI will render this: Boxes / Callouts : Typing &gt; Warning: There will be no second warning! will render this:    Warning: There will be no second warning! Typing &gt; Important: Pay attention! It's important. will render this:    Important: Pay attention! It&#8217;s important. Typing &gt; Tip: This is my tip. will render this:    Tip: This is my tip. Typing &gt; Note: Take note of this. will render this:    Note: Take note of this. Typing &gt; Note: A doc link to [an example website: fast. ai](https://www. fast. ai/) should also work fine. will render in the docs:    Note: A doc link to an example website: fast. ai should also work fine. "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')
    this.metadataWhitelist = ['position']

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}